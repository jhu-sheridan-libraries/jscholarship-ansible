---

- name: get java version
  shell:   "java -version 2>&1"
  register: java_version_result
  changed_when: false

  # NOTE: regex_search() returns an array of matches, so we will need to use the 'first' filter to make use of the first (and only) value
- set_fact: returned_java_version={{ java_version_result.stdout | regex_replace('^$','0.0.0') | regex_search('(?P<test>\d+\.\d+.\d+)', '\\g<test>' ) | first }}

- name: test java version
  fail:
    msg: "this installation of tomcat requires java version {{ tomcat_minimum_java_version }} or higher"
  when: "not returned_java_version | version_compare(tomcat_minimum_java_version, '>=')"

- name: get tomcat version
  shell:   "{{ catalina_home }}/bin/version.sh"
  register: tomcat_version_result
  failed_when: false
  changed_when: false

- name: check if tomcat service is running
  command: systemctl is-active tomcat
  failed_when: false
  changed_when: false
  register: tomcat_status

- name: add tomcat user group
  group:
    name:     "{{ tomcat_group }}"
    gid:      "{{ tomcat_group_gid | default(omit) }}"
    state: present
  become: true

- name: add tomcat user
  user:
    name:     "{{ tomcat_user }}"
    shell:    "/bin/bash"
    uid:      "{{ tomcat_user_uid  | default(omit) }}"
    group:    "{{ tomcat_group }}"
    comment:  "{{ tomcat_user }} system account"
  become: true

- name: get tomcat checksum
  set_fact:
    tomcat_checksum: "{{ tomcat_checksum_algo }}:{{ item | replace(' *' + tomcat_download_file,'') }}"
  with_url: "{{ tomcat_checksum_url }}"

- name: get tomcat
  get_url:
    url:      "{{ tomcat_url }}"
    dest:     "{{ tomcat_download_dir }}"
    checksum: "{{ tomcat_checksum }}"
  register: got_tomcat

- name: extract tomcat
  unarchive:
    src:        "{{ tomcat_download_dir }}/{{ tomcat_download_file }}"
    dest:       "{{ tomcat_install_dir }}"
    remote_src: yes
    owner:      "{{ tomcat_user }}"
    group:      "{{ tomcat_group }}"
  # when: got_tomcat.changed
  become: true

- name: symlink tomcat
  file:
    src:    "{{ tomcat_install_dir }}/{{ tomcat_dir }}"
    dest:   "{{ catalina_home }}"
    owner:  "{{ tomcat_user }}"
    group:  "{{ tomcat_group }}"
    state:  link
  become: true

- name: set tomcat environment vars
  lineinfile:
    dest:   "/etc/profile.d/tomcat.sh"
    line:   "export CATALINA_HOME={{ catalina_home }}"
    state:  present
    create: yes
  become: true

- name: set vars that follow from the value of tomcat_manager_access
  set_fact:
    access_state: "present"
  when: tomcat_manager_access
- set_fact:
    access_state: "absent"
  when: not tomcat_manager_access

- name: whitlist ips for manager access
  lineinfile:
    dest: "{{ catalina_home }}/{{ item }}"
    regexp: '^\s+allow='
    line: "allow=\"{{ tomcat_ip_whitelist | join('|') }}\" />"
    state: "{{ access_state }}"
    backup: true
  with_items: "{{ tomcat_manager_configs }}"
  become: true

- name: configure tomcat-users - roles
  lineinfile:
    dest: "{{ catalina_home }}/conf/tomcat-users.xml"
    regexp: '^<role rolename="{{ item }}" />'
    line: '<role rolename="{{ item }}" />'
    insertbefore: '</tomcat-users>'
    state: "{{ access_state }}"
  with_items: "{{ tomcat_roles }}"
  become: true

- name: configure tomcat-users - users
  lineinfile:
    dest: "{{ catalina_home }}/conf/tomcat-users.xml"
    regexp: '^<user username="{{ item.username }}"'
    line: '<user username="{{ item.username }}" password="{{ item.password }}" roles="{{ item.roles }}" />'
    insertbefore: '</tomcat-users>'
    state: "{{ access_state }}"
  with_items: "{{ tomcat_users }}"
  become: true

- name: configure tomcat service
  template:
    src:  "tomcat.service.j2"
    dest: "/etc/systemd/system/tomcat.service"
  notify: restart tomcat
  become: true

- name: Make sure tomcat service is running
  meta: flush_handlers
  # systemd:
  #   state: started
  #   name: tomcat

- name: get tomcat version
  shell: "bash -lc '$CATALINA_HOME/bin/version.sh'"
  register: tomcat_version_result
  changed_when: false
  become: true

  # NOTE: regex_search() returns an array of matches, so we will need to use the 'first' filter to make use of the first (and only) value
- set_fact: returned_tomcat_version={{ tomcat_version_result.stdout | regex_replace('^$','0.0.0') | regex_search('Tomcat/(?P<test>\d+\.\d+.\d+)', '\\g<test>' ) | first }}

- name: test tomcat version
  fail:
    msg: "attempted to install tomcat {{ tomcat_version }}, but something went wrong"
  when: "not returned_tomcat_version | version_compare(tomcat_version, '==')"
