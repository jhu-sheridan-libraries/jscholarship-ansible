---
# NOTE: requires full_environment inventory or emulation thereof
- name: create working copy of source database
  hosts: db_prod

  tasks:

  - name: debug db settings
    debug:
      msg: DB {{ db_name }} DB USER {{ db_user }} DB PASS {{ db_password }} ADDRESS {{ dspace_db_ip }}

  - name: install ansible postgres prereqs
    include_role:
      name: postgres
      tasks_from: ansible_prereqs

  - name: make sure postgres is on the path
    include_role:
      name: postgres
      tasks_from: path

  - name: set version-specific vars
    include_role:
      name: postgres
      tasks_from: set_vars
    vars:
      upgrading: false
      version_major: "{{ postgres_version_major }}"
      version_minor: "{{ postgres_version_minor }}"

  - name: add pg_hba entry for source database
    include_role:
      name: postgres
      tasks_from: pg_hba_entry
    vars:
      type: "local"
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      method: "md5"
      state: "present"

  - name: add pg_hba entry for postgres_admin_user
    include_role:
      name: postgres
      tasks_from: pg_hba_entry
    vars:
      type: "local"
      database: "all"
      user: "{{ postgres_admin_user }}"
      method: "ident"
      state: "present"

  - name: flush handlers so pg_hba changes take effect
    meta: flush_handlers

  - name: add pgpass entry for source database
    include_role:
      name: postgres
      tasks_from: pgpass
    vars:
      admin_user: "{{ login_user }}"
      admin_group: "{{ login_group }}"
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      password: "{{ db_password }}"
      state: "present"

  - name: backup source database
    include_role:
      name: postgres
      tasks_from: backup_db
    vars:
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      backup_file: "{{ db_backup_file }}"

  # begin: db transform block
  - name: create copy of source database for transformation
    block:
    - name: add pg_hba entry for database copy
      include_role:
        name: postgres
        tasks_from: pg_hba_entry
      vars:
        type: "local"
        database: "{{ copy_db_name }}"
        user: "{{ db_user }}"
        method: "md5"
        state: "present"

    - name: flush handlers so pg_hba changes take effect
      meta: flush_handlers

    - name: add pgpass entry for database copy
      include_role:
        name: postgres
        tasks_from: pgpass
      vars:
        admin_user: "{{ login_user }}"
        admin_group: "{{ login_group }}"
        database: "{{ copy_db_name }}"
        user: "{{ db_user }}"
        password: "{{ db_password }}"
        state: "present"

    - name: restore database copy from source database
      include_role:
        name: postgres
        tasks_from: restore_db
      vars:
        database: "{{ copy_db_name }}"
        user: "{{ db_user }}"
        backup_file: "{{ db_backup_file }}"

    - name: check transform_queries
      debug: var=db_transform_queries

    - name: run queries to transform database
      include_role:
        name: postgres
        tasks_from: query_db
      vars:
        admin_user: "{{ login_user }}"
        admin_group: "{{ login_group }}"
        database: "{{ copy_db_name }}"
        user: "{{ db_user }}"
        query_file: "queries/{{ item }}"
      with_items: "{{ db_transform_queries }}"

    - name: backup database copy
      include_role:
        name: postgres
        tasks_from: backup_db
      vars:
        database: "{{ copy_db_name }}"
        user: "{{ db_user }}"
        backup_file: "{{ copy_backup_file }}"

    - name: drop database copy
      include_role:
        name: postgres
        tasks_from: drop_db
      vars:
        database: "{{ copy_db_name }}"

    - name: remove pg_hba entry for database copy
      include_role:
        name: postgres
        tasks_from: pg_hba_entry
      vars:
        type: "local"
        database: "{{ copy_db_name }}"
        user: "{{ db_user }}"
        method: "md5"
        state: "absent"

    - name: remove pgpass entry for database copy
      include_role:
        name: postgres
        tasks_from: pgpass
      vars:
        admin_user: "{{ login_user }}"
        admin_group: "{{ login_group }}"
        database: "{{ copy_db_name }}"
        user: "{{ db_user }}"
        password: "{{ db_password }}"
        state: "absent"

    when: db_transform_queries is defined
    # end: db transform block

  # TODO: review
  - name: remove pg_hba entry for source database
    include_role:
      name: postgres
      tasks_from: pg_hba_entry
    vars:
      type: "local"
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      method: "md5"
      state: "absent"

  - name: flush handlers so pg_hba changes take effect
    meta: flush_handlers

  - name: remove pgpass entry for source database
    include_role:
      name: postgres
      tasks_from: pgpass
    vars:
      admin_user: "{{ login_user }}"
      admin_group: "{{ login_group }}"
      database: "{{ db_name }}"
      user: "{{ db_user }}"
      password: "{{ db_password }}"
      state: "absent"

  - name: remove the source backup file from the server
    file:
      path: "{{ db_backup_file }}"
      state: absent
    when: not db_retain_backup

  # NOTE: while it would be easier to synchronize files directly from one server to another,
  # i cannot seem to get the synchronize module to cooperate without asking for a password on the server.
  # so instead, i go through the trouble of bringing the desired file to the control,
  # then pushing it to the desired destination(s)
  - name: determine which backup file to retrieve
    set_fact:
      backup_file: "{{ db_backup_file }}"
  - set_fact:
      backup_file: "{{ copy_backup_file }}"
    when: db_transform_queries is defined

  # TODO: fragile workaround to compensate for the fact that I cannot
  # get extensions to backup and restore properly. fix.
  - name: derive the name the schema file from the backup file
    set_fact:
      schema_file: "{{ backup_file | replace('.sql', '') }}_schema.sql"

  - name: fetch backup and schema files from server
    fetch:
      src: "{{ item }}"
      dest: "../db_backup/"
      flat: true
    with_items:
    - "{{ backup_file }}"
    - "{{ schema_file }}"
